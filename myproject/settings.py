"""
Django settings for myproject.
Generated by 'django-admin startproject'.
"""

import os
from pathlib import Path
import dj_database_url

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'replace-this-with-a-unique-secret-key'
DEBUG = True
ALLOWED_HOSTS = ['*']  # or specify your domains

# Application definition
SHARED_APPS = [
    'django_tenants',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'tenant_users.permissions',
    'django.contrib.staticfiles', 
    'tenant_users.tenants',

    # Our apps
    'companies',
    'users',
    'accounts',
    'core',  # if you put your models here
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.admin',
]

TENANT_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'tenant_users.permissions',
]

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

TENANT_MODEL = "companies.Company"  # app.Model
TENANT_DOMAIN_MODEL = "companies.Domain"
TENANT_USERS_DOMAIN = "domain.com"  # adjust for your dev domain

AUTHENTICATION_BACKENDS = ("tenant_users.permissions.backend.UserBackend",)

AUTH_USER_MODEL = "users.TenantUser"

# SESSION_COOKIE_DOMAIN = ".domain.com"  # or your local dev domain, e.g. ".localhost"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'tenant_users.tenants.middleware.TenantAccessMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'



database_url = "postgresql://mvp_i6mn_user:ZhoB8r4fFVbXSQl2lQph4XdZ9wQHkThO@dpg-cve4a3vnoe9s73el64a0-a.oregon-postgres.render.com/mvp_i6mn"

db_config = dj_database_url.parse(database_url)

db_config['ENGINE'] = 'django_tenants.postgresql_backend'

DATABASES = {
    'default': {
        'ENGINE': db_config['ENGINE'],
        'NAME': db_config['NAME'],
        'USER': db_config['USER'],
        'PASSWORD': db_config['PASSWORD'],
        'HOST': db_config['HOST'],
        'PORT': db_config['PORT'],
    }
}




# Database
# DATABASES = {
#     'default': {
#         'ENGINE': 'django_tenants.postgresql_backend',
#         'NAME': 'mvp',
#         'USER': 'postgres',
#         'PASSWORD': 'ekadujonathan123',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }
DATABASE_ROUTERS = ['django_tenants.routers.TenantSyncRouter']





# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = '/static/'
media_url = '/media/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'   # after successful login, go to map
LOGOUT_REDIRECT_URL = '/'  # after logout, also go to map
LOGIN_URL = '/accounts/login/'
